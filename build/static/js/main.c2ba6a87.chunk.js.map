{"version":3,"sources":["components/time.tsx","components/timer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Time","props","sec","time","moment","utc","format","style","fontSize","useCountdown","limit","useState","leftSec","setLeftSec","timerObj","setTimerObj","active","setactive","useEffect","alert","clearInterval","window","confirm","setInterval","prev","Timer","reset","stop","start","className","onClick","App","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uRAmBeA,EARkB,SAACC,GAC9B,IAPeC,EAOTC,GAPSD,EAOQD,EAAMC,IAN/BE,IAAOC,IAAU,IAANH,GAAYI,OAAO,UAO5B,OACI,yBAAKC,MAAO,CAAEC,SAAS,MAAOL,ICXhCM,G,MAAe,SAACC,GAAwB,IAAD,EACIC,mBAASD,GADb,mBAClCE,EADkC,KACzBC,EADyB,OAECF,mBAAS,IAFV,mBAEpCG,EAFoC,KAE1BC,EAF0B,OAGGJ,oBAAS,GAHZ,mBAGlCK,EAHkC,KAG1BC,EAH0B,KAkDzC,OAPAC,qBAAU,WACMN,EA7BD,IACPO,MAAM,YACNC,cAAcN,GACdD,GAAW,kBAAMH,QA2BtB,CAACE,IACJM,qBAAU,WACNE,cAAcN,KAChB,IAEK,CAAC,CAACF,EAASI,GAAS,CA7Bb,WACNK,OAAOC,QAAQ,kBACfF,cAAcN,GACdD,EAAWH,GACXO,GAAU,KAIL,WACTA,GAAU,GACVG,cAAcN,IAEJ,WACLE,IACDI,cAAcN,GA7BbE,GACDD,EACIQ,aAAY,WACRV,GAAW,SAACW,GAAD,OAAkBA,EAAO,OACrC,MA2BPP,GAAU,SA4BPQ,EAZG,WAAO,IAAD,EAC8BhB,EAAa,MAD3C,yCACZG,EADY,kCACOc,EADP,KACcC,EADd,KACoBC,EADpB,KAEpB,OACI,yBAAKC,UAAU,SACX,kBAAC,EAAD,CAAM3B,IAAKU,IACX,4BAAQkB,QAASF,GAAjB,SACA,4BAAQE,QAASH,GAAjB,QACA,4BAAQG,QAASJ,GAAjB,WC5CGK,MAXf,WACE,OACE,yBAAKF,UAAU,OACb,4BAAQA,UAAU,cAChB,4CACA,kBAAC,EAAD,SCDYG,QACW,cAA7BX,OAAOY,SAASC,UAEe,UAA7Bb,OAAOY,SAASC,UAEhBb,OAAOY,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c2ba6a87.chunk.js","sourcesContent":["import React from \"react\"\n\nimport moment from 'moment';\nimport { render } from \"@testing-library/react\";\n\nconst secToMMSS = (sec: number): string =>\n  moment.utc(sec * 1000).format('mm:ss');\n\ntype TimeProps = {\n    sec:number\n}\nconst Time:React.FC<TimeProps> = (props) =>{\n    const time = secToMMSS(props.sec)\n    return(\n        <div style={{ fontSize:100}}>{time}</div>\n    )\n}\n\n\nexport default Time;","import React, { FC, useEffect, useState } from 'react';\nimport Time from \"./time\"\nimport \"./timer.css\"\nconst useCountdown = (limit: number): any => {\n    const [leftSec, setLeftSec]: [number, any] = useState(limit);\n    let [timerObj, setTimerObj]: [any, any] = useState(\"\")\n    const [active, setactive]: [boolean, any] = useState(false)\n\n    const setCountdown = () => {\n        if (!active) {\n            setTimerObj(\n                setInterval(() => {\n                    setLeftSec((prev: number) => prev - 1);\n                }, 1000)\n            );\n        }\n    }\n    const afterTimeup = (left: number): void => {\n        if (left < 0) {\n            alert('FINISHED');\n            clearInterval(timerObj)\n            setLeftSec(() => limit);\n        }\n    };\n    const reset = () => {\n        if (window.confirm('RESET TIMER?')) {\n            clearInterval(timerObj)\n            setLeftSec(limit);\n            setactive(false)\n        }\n    };\n\n    const stop = () => {\n        setactive(false);\n        clearInterval(timerObj);\n    };\n    const start = () => {\n        if (!active) {\n            clearInterval(timerObj);\n            setCountdown();\n            setactive(true);\n\n        }\n    };\n\n    \n    useEffect(() => {\n        afterTimeup(leftSec);\n    }, [leftSec])\n    useEffect(()=>{\n        clearInterval(timerObj)\n    },[])\n\n    return [[leftSec, active], [reset, stop, start]];\n};\n\nconst Timer: FC = () => {\n    const [[leftSec, active], [reset, stop, start]] = useCountdown(25 * 60)\n    return (\n        <div className=\"Timer\">\n            <Time sec={leftSec}></Time>\n            <button onClick={start}>start</button>\n            <button onClick={stop}>stop</button>\n            <button onClick={reset}>reset</button>\n        </div>\n    )\n}\n\nexport default Timer\n","  \nimport React, {FC, useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Time from \"./components/time\"\nimport Timer from \"./components/timer\"\nimport Counter from \"./components/counter\"\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Simple Timer</h1>\n        <Timer></Timer>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}