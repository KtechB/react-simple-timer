{"version":3,"sources":["components/time.tsx","components/useAudio.tsx","components/timer.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Time","props","sec","time","moment","utc","format","style","fontSize","useAudio","url","React","useState","Audio","audio","_forceUpdate","forceUpdate","prevState","useEffect","addEventListener","removeEventListener","paused","currentTime","play","pause","value","useCountdown","limit","audioUrl","Autoreset","setAutoreset","leftSec","setLeftSec","Count","setCount","timerObj","setTimerObj","active","setactive","load","count","clearInterval","playSilent","setInterval","prev","a","Timer","reset","stop","start","add_one_minute","reduce_one_minute","autoreset_change","className","Helmet","onClick","Math","floor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d11a267a.chunk.js","sourcesContent":["import React from \"react\"\n\nimport moment from 'moment';\nimport { render } from \"@testing-library/react\";\n\nexport const secToMMSS = (sec: number): string =>\n  moment.utc(sec * 1000).format('mm:ss');\n\ntype TimeProps = {\n    sec:number\n}\nconst Time:React.FC<TimeProps> = (props) =>{\n    const time = secToMMSS(props.sec)\n    return(\n        <div style={{ fontSize:100}}>{time}</div>\n    )\n}\n\nexport default Time;\n\n","import React from \"react\";\n//cite from https://qiita.com/kazumicho/items/53572ae56bb70b2e20d0\n\nconst useAudio = (url:string) => {\n  // create audio only once\n  const [audio] = React.useState(new Audio(url));\n\n  // same as React.Component.forceUpdate\n  const [, _forceUpdate] = React.useState(false);\n  const forceUpdate = () => _forceUpdate(prevState => !prevState);\n\n  React.useEffect(() => {\n    //audio.play();\n\n    audio.addEventListener(\"play\", forceUpdate);\n    audio.addEventListener(\"pause\", forceUpdate);\n    audio.addEventListener(\"ended\", forceUpdate);\n    audio.addEventListener(\"timeupdate\", forceUpdate);\n\n    return () => {\n      audio.removeEventListener(\"play\", forceUpdate);\n      audio.removeEventListener(\"pause\", forceUpdate);\n      audio.removeEventListener(\"ended\", forceUpdate);\n      audio.addEventListener(\"timeupdate\", forceUpdate);\n    };\n\n    /**\n     * about useEffect's second argument\n     *    give nothing        => same as componentDidUpdate\n     *audjio    give an empty array => same as componentWillMount\n     */\n  }, []);\n\n  const play:any= () => audio.play();\n  const pause:any = () => audio.pause();\n  const jump = (value:number) => (audio.currentTime += value);\n\n  return [audio,!audio.paused, audio.currentTime, play, pause, jump];\n};\n\nexport default useAudio;","import React, { FC, useEffect, useState } from \"react\";\nimport Time ,{secToMMSS}from \"./time\";\nimport \"./timer.css\";\nimport useAudio from \"./useAudio\"\nimport {Helmet} from \"react-helmet\"\nconst useCountdown = (limit: number): any => {\n  const [audio,playing, currentTime, play, pause, jump] = useAudio(audioUrl);\n  const [Autoreset, setAutoreset] = useState(true)\n  const [leftSec, setLeftSec]: [number, any] = useState(limit);\n  const [Count, setCount]: [number, any] = useState(0);\n  let [timerObj, setTimerObj]: [any, any] = useState(\"\");\n  const [active, setactive]: [boolean, any] = useState(false);\n  \n  const setCountdown = () => {\n    if (!active) {\n      setTimerObj(\n        setInterval(() => {\n          setLeftSec((prev: number) => prev - 1);\n        }, 1000)\n      );\n    }\n  };\n  const afterTimeup = (left: number): void => {\n    if (left < 0) {\n      \n      audio.play();\n      setCount((count:number)=> count +1)\n      if(Autoreset){\n          setLeftSec(Count%2===1 ?limit:5 * 60);\n\n      }\n      else{\n      \n      clearInterval(timerObj);\n      setLeftSec(Count%2===1 ?limit:5 * 60);\n      \n\n      setactive(false);}\n      \n      \n\n    }\n  };\n  const reset = () => {\n      clearInterval(timerObj);\n      setLeftSec(limit);\n      setactive(false);\n      \n  };\n\n  const stop = () => {\n    \n    setactive(false);\n    clearInterval(timerObj);\n  };\n  const start = () => {\n    if (!active) {\n      audio.playSilent()\n      clearInterval(timerObj);\n      setCountdown();\n      setactive(true);\n    }\n  };\n  const add_one_minute = () => {\n    setLeftSec((sec: number) => sec + 1 * 60);\n  };\n  const reduce_one_minute = () => {\n    setLeftSec((sec: number) => sec - 1 * 60);\n  };\n  const autoreset = () => {\n    setAutoreset((a:boolean)=>!a)\n  }\n\n  useEffect(() => {\n    audio.load()\n    afterTimeup(leftSec);\n  }, [leftSec,timerObj]);\n  useEffect(() => {\n    clearInterval(timerObj);\n  }, []);\n\n  return [\n    [leftSec, active,Count,Autoreset],\n    [reset, stop, start, add_one_minute, reduce_one_minute, autoreset],\n  ];\n};\n\nconst audioUrl = \"https://on-jin.com/sound/ag/s74f90/se/e/ani_ge_suzume01.mp3\";\nconst Timer: FC = () => {\n\n  const [playing, currentTime, play, pause, jump] = useAudio(audioUrl);\n  const [\n    [leftSec, active,Count, Autoreset],\n    [reset, stop, start, add_one_minute, reduce_one_minute,autoreset_change],\n  ] = useCountdown(25 * 60);\n\n  return (\n    <div className=\"Timer\">\n      <Helmet><title>Time</title></Helmet>\n      <Time sec={leftSec}></Time>\n      <button onClick={active?stop:start}>{active?\"stop\":\"start\"}</button>\n      <button onClick={reset}>reset</button>\n      <button onClick={add_one_minute}>+1</button>\n      <button onClick={reduce_one_minute}>-1</button>\n      <button onClick={autoreset_change}>{Autoreset?\"auto\":\"manual\"}</button>\n      <p>{Math.floor(Count/2)} cycle</p>\n      \n    </div>\n  );\n};\n\nexport default Timer;\n","  \nimport React, {FC, useEffect, useState} from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Timer from \"./components/timer\"\nfunction App() {\n  return (\n    <div className=\"App\">\n      \n      <header className=\"App-header\">\n        <h1>Simple Timer</h1>\n        <Timer></Timer>\n        \n        </header>\n\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}